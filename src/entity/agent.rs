//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use super::sea_orm_active_enums::AgentStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "agent")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub physical_id: Uuid,
    pub source: String,
    pub result: Option<String>,
    pub status: AgentStatus,
    pub option_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::options::Entity",
        from = "Column::OptionId",
        to = "super::options::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Options,
    #[sea_orm(
        belongs_to = "super::physical_agent::Entity",
        from = "Column::PhysicalId",
        to = "super::physical_agent::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PhysicalAgent,
    #[sea_orm(has_many = "super::task::Entity")]
    Task,
}

impl Related<super::options::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Options.def()
    }
}

impl Related<super::physical_agent::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhysicalAgent.def()
    }
}

impl Related<super::task::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Task.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
